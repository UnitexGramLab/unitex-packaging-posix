#!/bin/sh
# =============================================================================
# Unitex/GramLab Unix-like Environments Setup Script
# https://github.com/UnitexGramLab/unitex-packaging-unix
# =============================================================================
# Copyright (C) 2015 Université Paris-Est Marne-la-Vallée <unitex@univ-mlv.fr>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#
# cristian.martinez@univ-paris-est.fr (martinec)
# 
# =============================================================================
# This shell script must work in any POSIX-like system, including systems without 
# bash. See this helpful document on writing portable shell scripts:
# @see http://www.gnu.org/s/hello/manual/autoconf/Portable-Shell.html
# =============================================================================
# Script code must be ShellCheck-compliant for information about how to run 
# ShellCheck locally @see http://www.shellcheck.net/about.html
# e.g shellcheck -s sh setup
# =============================================================================
# Constants
# =============================================================================
UNITEX_SETUP_JAVA_DOWNLOAD_URL="http://www.java.com/en/download/manual.jsp"
UNITEX_SETUP_LINE_STRING=$(head -c 77 < /dev/zero | tr '\0' '=' || echo "")
UNITEX_SETUP_MINIMAL_JAVA_VERSION_STRING="1.7" # Minimal java version to run IDEs
UNITEX_SETUP_APP_DIR_NAME="App"                # App binaries directory name
UNITEX_SETUP_SRC_DIR_NAME="Src"                # Sources directory name
UNITEX_SETUP_SRC_CORE_DIR_NAME="C++"           # Core sources directory name
UNITEX_SETUP_SRC_CORE_BUILD_DIR_NAME="build"   # Core build directory name
UNITEX_SETUP_SRC_CORE_BIN_DIR_NAME="bin"       # Compiled binaries directory name
UNITEX_SETUP_PLATFORM_DIR_NAME="platform"      # Setup binaries directory name
UNITEX_SETUP_INSTALL_DIR_NAME="install"        # Setup install directory name
UNITEX_SETUP_WORKSPACE_DIR_NAME="workspace"    # Workspace directory name
UNITEX_WORKSPACE_HOME_NAME="Unitex-Gramlab"    # Default workspace/Unitex-Gramlab
UNITEX_WORKSPACE_DIR_NAME="Unitex"             # Default Unitex-Gramlab/Unitex
GRAMLAB_WORKSPACE_DIR_NAME="GramLab"           # Default Unitex-Gramlab/GramLab
UNITEX_WORKSPACE_CFG_FILE_NAME=".unitex.cfg"   # Unitex config file name
GRAMLAB_WORKSPACE_CFG_FILE_NAME=".gramlab"     # GramLab config file name
# =============================================================================
# Commands
# =============================================================================
#UNITEX_SETUP_COMMAND_CURL=$(command -v curl                || echo "")
UNITEX_SETUP_COMMAND_MAKE=$(command -v make                 || echo "")
UNITEX_SETUP_COMMAND_PRINTF=$(command -v  printf            ||\
                              command -v  /bin/echo         ||\
                              command -v  /usr/ucb/echo     ||\
                              command -v  echo              || echo "echo")
UNITEX_SETUP_COMMAND_OPEN_URL=$(command -v "$BROWSER"       ||\
                                command -v xdg-open         ||\
                                command -v gnome-open       ||\
                                command -v x-www-browser    ||\
                                command -v firefox          ||\
                                command -v chromium-browser ||\
                                command -v open             ||\
                                command -v cygstart         || echo "echo")
#UNITEX_SETUP_COMMAND_WGET=$(command -v wget              || echo "")
# =============================================================================
# Script working directory
# =============================================================================

# Working directory snippet from @source http://stackoverflow.com/a/17744637/2042871
UNITEX_SETUP_INSTALL_SCRIPT=$(cd -P -- "$(dirname -- "$0")" && pwd -P) &&\
UNITEX_SETUP_INSTALL_SCRIPT="$UNITEX_SETUP_INSTALL_SCRIPT/$(basename -- "$0")"

# Resolve symlinks snippet from @source http://stackoverflow.com/a/697552/2042871
while [ -h "$UNITEX_SETUP_INSTALL_SCRIPT" ]; do
    UNITEX_SETUP_INSTALL_DIR=$(dirname -- "$UNITEX_SETUP_INSTALL_SCRIPT")
    UNITEX_SETUP_INSTALL_SYM=$(readlink   "$UNITEX_SETUP_INSTALL_SCRIPT")
    UNITEX_SETUP_INSTALL_SCRIPT="$(cd "$UNITEX_SETUP_INSTALL_DIR"  &&\
                                  cd "$(dirname  -- "$UNITEX_SETUP_INSTALL_SYM")" &&\
                                 pwd)/$(basename -- "$UNITEX_SETUP_INSTALL_SYM")"
done  # [ -h "$UNITEX_SETUP_INSTALL_SCRIPT" ]

# Set-up working directory 
UNITEX_SETUP_INSTALL_BASEDIR="$(dirname  -- "$UNITEX_SETUP_INSTALL_SCRIPT")"

# =============================================================================
# Load dependencies
# =============================================================================
. "$UNITEX_SETUP_INSTALL_BASEDIR/platform"

# =============================================================================
# Setup paths
# =============================================================================
# Unitex-Gramlab/App/install
cd "$UNITEX_SETUP_INSTALL_BASEDIR"

# Unitex-Gramlab/App
UNITEX_SETUP_APP_BASEDIR=$(cd -P -- .. && pwd -P)
cd "$UNITEX_SETUP_APP_BASEDIR"

# Unitex-Gramlab
UNITEX_SETUP_HOME_BASEDIR=$(cd -P -- .. && pwd -P)

# Unitex-Gramlab/Src/C++
UNITEX_SETUP_SOURCES_PATH="$UNITEX_SETUP_HOME_BASEDIR/$UNITEX_SETUP_SRC_DIR_NAME/$UNITEX_SETUP_SRC_CORE_DIR_NAME"

# Unitex-Gramlab/Src/C++/build
UNITEX_SETUP_SOURCES_BUILD_PATH="$UNITEX_SETUP_SOURCES_PATH/$UNITEX_SETUP_SRC_CORE_BUILD_DIR_NAME"

# Unitex-Gramlab/Src/C++/bin
UNITEX_SETUP_SOURCES_BIN_PATH="$UNITEX_SETUP_SOURCES_PATH/$UNITEX_SETUP_SRC_CORE_BIN_DIR_NAME"

# /home/user/workspace/Unitex-Gramlab
UNITEX_WORKSPACE_HOME_BASEDIR="$HOME/$UNITEX_SETUP_WORKSPACE_DIR_NAME/$UNITEX_WORKSPACE_HOME_NAME"

# /home/user/workspace/Unitex-Gramlab/Unitex
UNITEX_WORKSPACE_PATH="$UNITEX_WORKSPACE_HOME_BASEDIR/$UNITEX_WORKSPACE_DIR_NAME"

# /home/user/workspace/Unitex-Gramlab/GramLab
GRAMLAB_WORKSPACE_PATH="$UNITEX_WORKSPACE_HOME_BASEDIR/$GRAMLAB_WORKSPACE_DIR_NAME"

# Unitex workspace configuration file
# /home/user/.unitex.cfg
UNITEX_WORKSPACE_CFG_FILE="$HOME/$UNITEX_WORKSPACE_CFG_FILE_NAME"   

# GramLab workspace configuration file
# /home/user/.gramlab
GRAMLAB_WORKSPACE_CFG_FILE="$HOME/$GRAMLAB_WORKSPACE_CFG_FILE_NAME"
# =============================================================================
# Support message
# =============================================================================
unitex_setup_print_support_message() {
  echo "$UNITEX_SETUP_LINE_STRING"
  echo "If you are having problems building or running Unitex/Gramlab," 
  echo "please feel free to post a support question on the community" 
  echo "support forum: http://forum.unitexgramlab.org. Some general" 
  echo "advice about asking technical support questions can be found"
  echo "at http://www.catb.org/esr/faqs/smart-questions.html"
  echo "$UNITEX_SETUP_LINE_STRING"
}

# =============================================================================
# Binaries not found message
# =============================================================================
unitex_setup_print_binaries_not_found_message() {
  echo "$UNITEX_SETUP_LINE_STRING"
  echo "WARNING: There are not currently precompiled binaries for your platform"
  echo "Detected operating system:  $UNITEX_SETUP_OS_TYPE"
  echo "Detected host architecture: $UNITEX_SETUP_ARCH_TYPE"
  echo "Tested paths:"
  $UNITEX_SETUP_COMMAND_PRINTF " \r\033[2K [\033[0;31mXX\033[0m] $UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA\n"
  $UNITEX_SETUP_COMMAND_PRINTF " \r\033[2K [\033[0;31mXX\033[0m] $UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OB\n"
  $UNITEX_SETUP_COMMAND_PRINTF " \r\033[2K [\033[0;31mXX\033[0m] $UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OS\n"
  echo "$UNITEX_SETUP_LINE_STRING"  
}

# =============================================================================
# Java not found message
# =============================================================================
unitex_setup_java_not_found_message() {
  if [ ! -n "${UNITEX_SETUP_JAVA_VENDOR+1}" ]; then
    echo "$UNITEX_SETUP_LINE_STRING"
    echo "WARNING: In order to run Unitex/GramLab IDEs, you need Java version $UNITEX_SETUP_MINIMAL_JAVA_VERSION_STRING"
    echo "or later installed on your system. Notice that a JRE version is enough to run"
    echo "both of two visual environments. To download Java online, please go to"
    echo "$UNITEX_SETUP_JAVA_DOWNLOAD_URL"
  fi  
}  

# =============================================================================
# Installation completed message
# =============================================================================
unitex_setup_installation_completed_message() {
  echo "$UNITEX_SETUP_LINE_STRING"
  echo "Unitex/GramLab installation has successfully been completed!"
  if [ ! -n "${UNITEX_SETUP_JAVA_VENDOR+1}" ]; then
   $UNITEX_SETUP_COMMAND_PRINTF   " \r\033[2K [\033[0;31mXX\033[0m] Java bin directory     : Java not found!\n"
   $UNITEX_SETUP_COMMAND_OPEN_URL "$UNITEX_SETUP_JAVA_DOWNLOAD_URL" > /dev/null 2>&1 
  else
   $UNITEX_SETUP_COMMAND_PRINTF   " \r\033[2K [\033[00;32mOK\033[0m] Java bin directory     : $JAVA_BINDIR\n"
  fi   
  $UNITEX_SETUP_COMMAND_PRINTF    " \r\033[2K [\033[00;32mOK\033[0m] Installation directory : $UNITEX_SETUP_HOME_BASEDIR\n"
  $UNITEX_SETUP_COMMAND_PRINTF    " \r\033[2K [\033[00;32mOK\033[0m] Workspace directory    : $UNITEX_WORKSPACE_HOME_BASEDIR\n"
  echo "$UNITEX_SETUP_LINE_STRING"
}

# =============================================================================
# Check for: 
# - Unitex-Gramlab/App/install
# - Unitex-Gramlab/App 
# - Unitex-Gramlab/README.txt
# =============================================================================
unitex_setup_check_path () {
  readonly app=$(basename "$UNITEX_SETUP_APP_BASEDIR")
  readonly app_path="$UNITEX_SETUP_HOME_BASEDIR/$UNITEX_SETUP_APP_DIR_NAME"
  readonly install=$(basename "$UNITEX_SETUP_INSTALL_BASEDIR")
  readonly install_path="$app_path/$UNITEX_SETUP_INSTALL_DIR_NAME"
  readonly readme="$UNITEX_SETUP_HOME_BASEDIR/README.txt"

  if [ x"$app"     != x"$UNITEX_SETUP_APP_DIR_NAME"     -o \
       x"$install" != x"$UNITEX_SETUP_INSTALL_DIR_NAME" -o \
    ! -e "$readme" ]; then
    echo "$UNITEX_SETUP_LINE_STRING"
    echo "WARNING: A valid Unitex/GramLab distribution was not detected"
    
    echo "Tested paths:"
    # Unitex-Gramlab/App
    if [ -d "$app_path" ]; then
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[00;32mOK\033[0m] $app_path\n" 
    else
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[0;31mXX\033[0m] $app_path\n" 
    fi
    # Unitex-Gramlab/App/install
    if [ -d "$install_path" ]; then
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[00;32mOK\033[0m] $install_path\n" 
    else
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[0;31mXX\033[0m] $install_path\n" 
    fi

    echo "Tested files:"
    # Unitex-Gramlab/README.txt
    if [  -e "$readme" ]; then
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[00;32mOK\033[0m] $readme\n" 
    else
      $UNITEX_SETUP_COMMAND_PRINTF "\r\033[2K [\033[0;31mXX\033[0m] $readme\n" 
    fi   

    echo "$UNITEX_SETUP_LINE_STRING"  
    echo "Would you like to continue?"
    while true
    do
      $UNITEX_SETUP_COMMAND_PRINTF "Please type y to accept, n otherwise: "
      read yn
      if test x"$yn" = xn; then
        unitex_setup_print_support_message
        exit 1
        break;
      elif test x"$yn" = xy; then
        break;
      fi
    done    
  fi  
}

# =============================================================================
# Check if there are precompiled binaries for this platform
# =============================================================================
unitex_setup_app_binaries_detection() {
  # Unitex-Gramlab/App 
  cd "$UNITEX_SETUP_APP_BASEDIR"

  # e.g. linux-i686, linux-x86_64
  UNITEX_SETUP_PLATFORM_OA="$UNITEX_SETUP_OS_TYPE-$UNITEX_SETUP_ARCH_TYPE"
  # e.g. linux32, linux64
  UNITEX_SETUP_PLATFORM_OB="$UNITEX_SETUP_OS_TYPE$UNITEX_SETUP_ARCH_BITS"
  # e.g. linux, osx
  UNITEX_SETUP_PLATFORM_OS="$UNITEX_SETUP_OS_TYPE"

  UNITEX_SETUP_APP_BINARIES=""
  if    [ -d "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA" -a \
    "$(ls -A "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA" 2>/dev/null )" ]; then
    # e.g. platform/linux-i686, platform/linux-x86_64
    UNITEX_SETUP_APP_BINARIES="$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA"
  elif  [ -d "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OB" -a \
    "$(ls -A "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OB" 2>/dev/null )" ]; then
    # e.g. platform/linux32, platform/linux64
    UNITEX_SETUP_APP_BINARIES="$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OB"
  elif  [ -d "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OS" -a \
    "$(ls -A "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OS" 2>/dev/null )" ]; then
    # e.g. platform/$UNITEX_SETUP_PLATFORM_OB
    UNITEX_SETUP_APP_BINARIES="$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OS"
  fi

  if [ -z "$UNITEX_SETUP_APP_BINARIES" ]; then
    unitex_setup_compile_binaries
  fi
}

# =============================================================================
# Try to compile binaries when there are not a precompiled version
# =============================================================================
unitex_setup_compile_binaries() {
  unitex_setup_print_binaries_not_found_message
  if [   -d "$UNITEX_SETUP_SOURCES_BUILD_PATH" -a\
       ! -z "$UNITEX_SETUP_COMMAND_MAKE" ]; then
    
    echo "Would you like to compile Unitex/GramLab?'"
    
    while true
    do
      $UNITEX_SETUP_COMMAND_PRINTF "Please type y to accept, n otherwise: "
      read yn
      if test x"$yn" = xn; then
        unitex_setup_print_support_message
        exit 1
        break;
      elif test x"$yn" = xy; then
        break;
      fi
    done
  
    cd "$UNITEX_SETUP_SOURCES_BUILD_PATH"

    {
      # execute make
      eval "$UNITEX_SETUP_COMMAND_MAKE clean && $UNITEX_SETUP_COMMAND_MAKE UNITEXTOOLLOGGERONLY=yes" |\
            tee "$UNITEX_SETUP_INSTALL_BASEDIR/build.log"
            
      # save return code
      exit_status=$?
    }

    if [ $exit_status -ne 0 ]; then
      echo "$UNITEX_SETUP_LINE_STRING"
      echo "FATAL: Unitex/GramLab could not compile"
      echo "Return status : $exit_status"
      unitex_setup_print_support_message
      exit 1
    else
      local installation_failed=0
      echo "$UNITEX_SETUP_LINE_STRING"
      echo "Info: Unitex/GramLab compilation completed successfully"
      
      cd "$UNITEX_SETUP_APP_BASEDIR"
      
      # create platform directory
      mkdir -p "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA" || {
        installation_failed=1
      }  

      # copy binaries to the platform directory
      cp -f "$UNITEX_SETUP_SOURCES_BIN_PATH"/* "$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA" || {
        installation_failed=1
      }   
      
      if [ $installation_failed -eq 0 ]; then
       UNITEX_SETUP_APP_BINARIES="$UNITEX_SETUP_PLATFORM_DIR_NAME/$UNITEX_SETUP_PLATFORM_OA"
       echo "All binaries were copied to $UNITEX_SETUP_APP_BINARIES"
      else
       echo "$UNITEX_SETUP_LINE_STRING"
       echo "FATAL: Unitex/GramLab compiled binaries not found!"
       unitex_setup_print_support_message
       exit 1        
      fi
    fi  #  [ $exit_status -ne 0 ]; then

    cd "$UNITEX_SETUP_INSTALL_BASEDIR"
  else  # [ -d "$UNITEX_SETUP_SOURCES_BUILD_PATH" ...
    echo "FATAL: Unitex/GramLab could not compile"
    # Sources not found
    if [ ! -d "$UNITEX_SETUP_SOURCES_BUILD_PATH" ]; then
     echo "Unitex/GramLab core sources not found!"
     $UNITEX_SETUP_COMMAND_PRINTF " \r\033[2K [\033[0;31mXX\033[0m] $UNITEX_SETUP_SOURCES_BUILD_PATH\n"
    fi
    # make command not found
    if [ -z "$UNITEX_SETUP_COMMAND_MAKE" ]; then
     $UNITEX_SETUP_COMMAND_PRINTF " \r\033[2K [\033[0;31mXX\033[0m] Command 'make' not found\n"
    fi  
    unitex_setup_print_support_message
    exit 1    
  fi  # [ -d "$UNITEX_SETUP_SOURCES_BUILD_PATH" ...
}

# =============================================================================
# Create binaries' symbolic links
# e.g. UnitexToolLogger -> platform/linux-x86_64/UnitexToolLogger
# =============================================================================
unitex_setup_app_binaries_links_creation() {  
  cd "$UNITEX_SETUP_APP_BASEDIR"
  if [ ! -z "$UNITEX_SETUP_APP_BINARIES" -a\
         -d "$UNITEX_SETUP_APP_BINARIES" ]; then
    for file in "${UNITEX_SETUP_APP_BINARIES:?}"/*; do
      ln -sf "$file" .
    done  #  file in "${UNITEX_SETUP_APP_BINARIES:?}"/*; do
  fi  # [ ! -z "$UNITEX_SETUP_APP_BINARIES" ]ma
}


# =============================================================================
# Create workspace directories
# e.g /home/user/workspace/Unitex-Gramlab/Unitex
# e.g /home/user/workspace/Unitex-Gramlab/GramLab
# =============================================================================
unitex_setup_create_workspace_directories() {
  # Unitex workspace
  if [ ! -e "$UNITEX_WORKSPACE_CFG_FILE" -a\
       ! -d "$UNITEX_WORKSPACE_PATH" ]; then

    # Create the Unitex workspace directory   
    mkdir -p "$UNITEX_WORKSPACE_PATH"

    # Check if the Unitex workspace directory has been created
    if [ -d "$UNITEX_WORKSPACE_PATH" ]; then
      # Save the Unitex workspace configuration
      echo "$UNITEX_WORKSPACE_PATH" > "$UNITEX_WORKSPACE_CFG_FILE"
    fi  # [ -d "$UNITEX_WORKSPACE_PATH" ]
  fi  # [ ! -e "$UNITEX_WORKSPACE_CFG_FILE" -a ...

  # GramLab workspace
  if [ ! -e "$GRAMLAB_WORKSPACE_CFG_FILE" -a\
       ! -d "$GRAMLAB_WORKSPACE_PATH" ]; then

    # Create the GRAMLAB workspace directory   
    mkdir -p "$GRAMLAB_WORKSPACE_PATH"

    # Check if the GRAMLAB workspace directory has been created
    if [ -d "$GRAMLAB_WORKSPACE_PATH" ]; then
      # Save the GRAMLAB workspace configuration
      echo "svn_repositories: 0"      > "$GRAMLAB_WORKSPACE_CFG_FILE"
      echo "$UNITEX_WORKSPACE_PATH"  >> "$GRAMLAB_WORKSPACE_CFG_FILE"
    fi  # [ -d "$GRAMLAB_WORKSPACE_PATH" ]
  fi  # [ ! -e "$GRAMLAB_WORKSPACE_CFG_FILE" -a ...
}

# =============================================================================
# Main Setup
# =============================================================================
unitex_setup_check_path
unitex_setup_os_type_detection
unitex_setup_arch_type_detection
unitex_setup_arch_bits_detection
unitex_setup_java_detection
unitex_setup_java_not_found_message
unitex_setup_app_binaries_detection
unitex_setup_app_binaries_links_creation
unitex_setup_create_workspace_directories
unitex_setup_installation_completed_message
# =============================================================================
